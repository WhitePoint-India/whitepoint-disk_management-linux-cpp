#ifndef DISK_MANAGEMENT_H
#define DISK_MANAGEMENT_H

#include <vector>
#include <string>
#include <memory>

namespace DiskManagement {

    class Disk {
    public:
        std::string serial;
        std::string model;
        std::string path;
        std::string description;
        unsigned long long size;
        unsigned long long sectorSize;

        Disk(
            const std::string& serial,
            const std::string& model,
            const std::string& path,
            const std::string& description,
            unsigned long long size,
            unsigned long long sectorSize
        );

        virtual ~Disk() = default;

        unsigned long long getSectorCount();
    };

    class ATADisk: public Disk {
    public:
        enum DiskState {
            READY,
            FROZEN
        };

        class ATADiskDeleteMethod {
        public:
            virtual void deleteDisk(class ATADisk& disk) const = 0;
        };

        DiskState state;

        ATADisk(
            const std::string& serial,
            const std::string& model,
            const std::string& path,
            const std::string& description,
            unsigned long long size,
            unsigned long long sectorSize,
            DiskState state
        );

        bool isFrozen();
        void unfreeze();

        void deleteDisk(const ATADiskDeleteMethod& method);
        void deleteDisk();
    };

    class NVMeDisk: public Disk {
    public:

        class NVMeDiskDeleteMethod {
        public:
            virtual void deleteDisk(class NVMeDisk& disk) const = 0;
        };

        NVMeDisk(
            const std::string& serial,
            const std::string& model,
            const std::string& path,
            const std::string& description,
            unsigned long long size,
            unsigned long long sectorSize
        );

        /// @brief deleteDisk() is used to delete NVMeDisk using a proper NVMeDiskDeleteMethod
        /// @param method is an object of type NVMeDiskDeleteMthod
        void deleteDisk(const NVMeDiskDeleteMethod& method);

        void deleteDisk();
    };

    class USBDisk: public Disk {
    public:
        class USBDiskDeleteMethod {
            virtual void deleteDisk(class NVMeDisk& disk) const = 0;
        };

        USBDisk(
            const std::string& serial,
            const std::string& model,
            const std::string& path,
            const std::string& description,
            unsigned long long size,
            unsigned long long sectorSize
        );
    };


    class SecureErase : public ATADisk::ATADiskDeleteMethod, public NVMeDisk::NVMeDiskDeleteMethod {
    public:
        void deleteDisk(ATADisk& disk) const override;

        void deleteDisk(NVMeDisk& disk) const override;
    };

    class GutmannMethod : public ATADisk::ATADiskDeleteMethod, public NVMeDisk::NVMeDiskDeleteMethod {
    public:
        void deleteDisk(ATADisk& disk) const override;

        void deleteDisk(NVMeDisk& disk) const override;
    };

    extern const SecureErase& SECURE_ERASE_METHOD;
    extern const GutmannMethod& GUTMANN_METHOD;

    std::vector<std::unique_ptr<Disk>> fetchDisks();
}

#endif // DISK_MANAGEMENT_H