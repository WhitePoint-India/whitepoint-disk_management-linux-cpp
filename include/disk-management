#ifndef DISK_MANAGEMENT_H
#define DISK_MANAGEMENT_H

#include <vector>
#include <string>
#include <memory>

namespace DiskManagement {
    
    enum DiskState {
        READY,
        FROZEN
    };

    class DiskDeleteMethod {
    public:
        virtual ~DiskDeleteMethod() = default;
        virtual void deleteDisk(class Disk& disk) const = 0;
    };

    extern const DiskDeleteMethod& SECURE_ERASE_METHOD;
    extern const DiskDeleteMethod& GUTMANN_METHOD;

    class Disk {
    public:
        std::string serial;
        std::string model;
        std::string path;
        std::string description;
        unsigned long long size;
        unsigned long long sectorCount;
        DiskState state;

        Disk(
            const std::string& serial,
            const std::string& model,
            const std::string& path,
            const std::string& description,
            unsigned long long size,
            unsigned long long sectorCount,
            DiskState state
        );
        
        bool isFrozen() const;
        void unfreeze();
        void deleteDisk(const DiskDeleteMethod& method = SECURE_ERASE_METHOD);
    };

    std::vector<Disk> fetchDisks();
}

#endif // DISK_MANAGEMENT_H